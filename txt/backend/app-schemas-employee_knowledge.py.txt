from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, List
from datetime import date, datetime
from uuid import UUID
from enum import Enum

class StatusEnum(str, Enum):
    DESEJADO = "DESEJADO"
    OBTIDO = "OBTIDO"
    OBRIGATORIO = "OBRIGATORIO"

class KnowledgeLevelEnum(str, Enum):
    BASICO = "BASICO"
    INTERMEDIARIO = "INTERMEDIARIO"
    AVANCADO = "AVANCADO"
    ESPECIALISTA = "ESPECIALISTA"

class EmployeeKnowledgeBase(BaseModel):
    employee_id: UUID = Field(..., description="ID do colaborador")
    knowledge_id: UUID = Field(..., description="ID do conhecimento")

    class Config:
        from_attributes = True
        use_enum_values = True

class EmployeeKnowledgeCreate(EmployeeKnowledgeBase):
    data_inicio: Optional[date] = None
    data_limite: Optional[date] = None
    data_obtencao: Optional[date] = None
    data_expiracao: Optional[date] = None
    progresso: Optional[float] = 0.0
    certificado_url: Optional[str] = Field(None, max_length=500)
    observacoes: Optional[str] = Field(None, max_length=500)
    nivel_obtido: Optional[KnowledgeLevelEnum] = None
    status: StatusEnum = StatusEnum.DESEJADO

    @validator('data_expiracao')
    def validate_expiration_date(cls, v, values):
        if v and 'data_obtencao' in values and v <= values['data_obtencao']:
            raise ValueError('Data de validade deve ser posterior à data de obtenção')
        return v

    class Config:
        from_attributes = True
        use_enum_values = True

class EmployeeKnowledgeUpdate(BaseModel):
    data_inicio: Optional[date] = None
    data_limite: Optional[date] = None
    data_obtencao: Optional[date] = None
    data_expiracao: Optional[date] = None
    progresso: Optional[float] = None
    certificado_url: Optional[str] = Field(None, max_length=500)
    observacoes: Optional[str] = Field(None, max_length=500)
    nivel_obtido: Optional[KnowledgeLevelEnum] = None
    status: Optional[StatusEnum] = None

    class Config:
        from_attributes = True
        use_enum_values = True

class EmployeeKnowledgeResponse(EmployeeKnowledgeBase):
    id: UUID
    data_inicio: Optional[date] = None
    data_limite: Optional[date] = None
    data_obtencao: Optional[date]
    data_expiracao: Optional[date] = None
    progresso: Optional[float] = 0.0
    certificado_url: Optional[str] = None
    observacoes: Optional[str] = None
    nivel_obtido: Optional[KnowledgeLevelEnum] = None
    status: StatusEnum = StatusEnum.DESEJADO
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    class Config:
        orm_mode = True
        from_attributes = True

class EmployeeKnowledgeDetail(EmployeeKnowledgeResponse):
    knowledge_name: str
    knowledge_type: str
    employee_name: str
    employee_cargo: str

    class Config:
        from_attributes = True

class EmployeeKnowledgeStats(BaseModel):
    employee_id: UUID
    employee_name: str
    total_knowledge: int
    by_type: Dict[str, int]
    by_level: Dict[str, int]
    certifications_count: int
    expiring_soon: int
    completion_rate: float

    class Config:
        from_attributes = True
