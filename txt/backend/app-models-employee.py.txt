import uuid
from sqlalchemy import Column, String, Date, Numeric, Integer, ForeignKey, JSON, Text, DateTime
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.models.base import Base


class Employee(Base):
    """Model de Colaborador com todos os campos necess√°rios"""
    __tablename__ = "employees"

    # Identifica√ß√£o
    id = Column(UUID(as_uuid=True), primary_key=True, index=True, default=uuid.uuid4, unique=True)
    nome = Column(String(255), nullable=False, index=True)
    email = Column(String(320), unique=True, nullable=False, index=True)
    cpf = Column(String(11), unique=True, index=True)

    # Dados Pessoais
    data_nascimento = Column(Date)
    telefone = Column(String(20))
    endereco = Column(String(500))
    rg = Column(String(20))
    estado_civil = Column(String(20))
    email_pessoal = Column(String(320))
    telefone_pessoal = Column(String(20))

    # Dados Profissionais
    cargo = Column(String(255), nullable=False)
    data_admissao = Column(Date)
    salario = Column(Numeric(10, 2))
    departamento = Column(String(100))
    filhos_qtd = Column(Integer, default=0)
    senioridade = Column(String(50))

    # --- üîó Relacionamento com √Åreas (tabela: areas) ---
    area_id = Column(UUID(as_uuid=True), ForeignKey("areas.id", ondelete="SET NULL"), nullable=True)
    area = relationship("Area", back_populates="employees")

    # Relacionamentos existentes
    team_id = Column(UUID(as_uuid=True), ForeignKey("teams.id", ondelete="SET NULL"), nullable=True)
    manager_id = Column(UUID(as_uuid=True), ForeignKey("managers.id", ondelete="SET NULL"), nullable=True)
    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=True)

    # Gest√£o de RH (JSON para flexibilidade)
    ferias_dados = Column(JSON, default=dict)
    pdi_dados = Column(JSON, default=dict)
    reunioes_1x1 = Column(JSON, default=dict)

    # Datas importantes
    data_proximo_pdi = Column(Date)
    data_proxima_1x1 = Column(Date)
    data_ultima_avaliacao = Column(Date)
    day_off_aniversario = Column(Date)

    # Status e observa√ß√µes
    status = Column(String(50), nullable=False, default="ATIVO", index=True)
    observacoes = Column(Text)

    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    # Relacionamentos ORM
    team = relationship("Team", back_populates="members", foreign_keys=[team_id])
    manager = relationship("Manager", back_populates="subordinados", foreign_keys=[manager_id])
    user = relationship("User", back_populates="employee", uselist=False)
    conhecimentos = relationship(
        "EmployeeKnowledge", back_populates="employee", cascade="all, delete-orphan"
    )

    def __repr__(self):
        return f"<Employee(id={self.id}, nome='{self.nome}', cargo='{self.cargo}')>"

    def to_dict(self):
        """Converte o model para dicion√°rio"""
        return {
            "id": str(self.id),
            "nome": self.nome,
            "email": self.email,
            "cpf": self.cpf,
            "data_nascimento": self.data_nascimento.isoformat() if self.data_nascimento else None,
            "telefone": self.telefone,
            "endereco": self.endereco,
            "cargo": self.cargo,
            "data_admissao": self.data_admissao.isoformat() if self.data_admissao else None,
            "salario": float(self.salario) if self.salario else None,
            "departamento": self.departamento,
            "area": self.area.nome if self.area else None,
            "area_id": str(self.area_id) if self.area_id else None,
            "team_id": str(self.team_id) if self.team_id else None,
            "manager_id": str(self.manager_id) if self.manager_id else None,
            "user_id": str(self.user_id) if self.user_id else None,
            "ferias_dados": self.ferias_dados,
            "pdi_dados": self.pdi_dados,
            "reunioes_1x1": self.reunioes_1x1,
            "data_proximo_pdi": self.data_proximo_pdi.isoformat() if self.data_proximo_pdi else None,
            "data_proxima_1x1": self.data_proxima_1x1.isoformat() if self.data_proxima_1x1 else None,
            "data_ultima_avaliacao": self.data_ultima_avaliacao.isoformat() if self.data_ultima_avaliacao else None,
            "day_off_aniversario": self.day_off_aniversario.isoformat() if self.day_off_aniversario else None,
            "status": self.status,
            "observacoes": self.observacoes,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }
