from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.gzip import GZipMiddleware
import logging

# ============================================================
# üß† CONFIGURA√á√ÉO BASE
# ============================================================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Gest√£o 360 - OL Tecnologia",
    description="Sistema completo de gest√£o de colaboradores, conhecimentos e relacionamento empresarial",
    version="2.0.0",
    docs_url="/docs",
    redoc_url=None,   # Desabilitado o padr√£o para usar o customizado
)

# ============================================================
# üåê MIDDLEWARES - CORS CONFIGURADO
# ============================================================
origins = [
    "http://localhost:3000",   # seu frontend - ajuste se preciso
    "http://127.0.0.1:3000"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # para desenvolvimento pode usar ["*"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware GZip
app.add_middleware(GZipMiddleware, minimum_size=1000)

# ============================================================
# üì¶ IMPORTA√á√ÉO DOS ROUTERS
# ============================================================
from app.routers.auth import router as auth_router
from app.routers.admin import router as admin_router
from app.routers.employees import router as employees_router
from app.routers.knowledge import router as knowledge_router
from app.routers.employee_knowledge import router as employee_knowledge_router
from app.routers.areas import router as areas_router
from app.routers.teams import router as teams_router
from app.routers.managers import router as managers_router
from app.routers.alerts import router as alerts_router

app.include_router(auth_router)
app.include_router(admin_router)
app.include_router(employees_router)
app.include_router(knowledge_router)
app.include_router(employee_knowledge_router)
app.include_router(areas_router)
app.include_router(teams_router)
app.include_router(managers_router)
app.include_router(alerts_router)

logger.info("‚úÖ Todos os routers inclu√≠dos com sucesso.")

# ============================================================
# üìÅ ARQUIVOS EST√ÅTICOS
# ============================================================
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# ============================================================
# üåç ROTAS B√ÅSICAS
# ============================================================
@app.get("/", tags=["Sistema"])
async def root():
    return {
        "message": "üöÄ Gest√£o 360 - Sistema de Gest√£o Completo",
        "version": "2.0.0",
        "status": "online",
        "docs": "/docs",
        "redoc": "/redoc",
        "health": "/health",
    }

@app.get("/health", tags=["Sistema"])
async def health_check():
    try:
        from app.database import check_database_connection
        db_status = check_database_connection()
        return {
            "status": "healthy" if db_status.get("status") == "healthy" else "unhealthy",
            "version": "2.0.0",
            "database": db_status,
            "timestamp": "2025-01-01T00:00:00Z"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={"status": "unhealthy", "error": str(e)},
        )

# ============================================================
# ‚ö†Ô∏è TRATAMENTO DE EXCE√á√ïES
# ============================================================
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"error": exc.detail, "status_code": exc.status_code},
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    logger.error(f"Unhandled exception: {exc}")
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "detail": str(exc)},
    )

# ============================================================
# üé® RE-DOC PERSONALIZADO OTIMIZADO
# ============================================================
@app.get("/redoc", include_in_schema=False)
async def custom_redoc():
    html_content = """
    <!DOCTYPE html>
    <html lang="pt-BR">
      <head>
        <meta charset="utf-8" />
        <title>Gest√£o 360 API Docs</title>
        <!-- favicon da OL -->
        <link rel="icon" href="https://ol-tecnologia.com.br/favicon.ico" />
        <style>
          body { margin:0; padding:0; font-family:'Inter',sans-serif; }
          #redoc-container {
            background-color:#cccccc; !important;
          }
          .topbar {
            background-color:#cccccc !important;
          }
          .header-bar {
            background:#cccccc !important;
            text-align:center;
            padding:10px;
          }
          .header-bar img {
            height:60px;
          }
        </style>
      </head>
      <body>
        <div class="header-bar">
          <img src="/static/lg_t_white.png" alt="Gest√£o 360 - OL Tecnologia">
        </div>

        <redoc id="redoc-container"
               spec-url="/openapi.json"
               lazy-rendering
               hide-download-button
               theme='{
                 "colors": {
                   "primary": { "main": "#e63946" },
                   "text": { "primary": "#1d3557", "secondary": "#457b9d" },
                   "responses": {
                     "success": { "color": "#06d6a0" },
                     "error": { "color": "#ef476f" }
                   }
                 },
                 "typography": {
                   "fontSize": "15px",
                   "fontFamily": "Inter, sans-serif",
                   "headings": { "fontFamily": "Inter, sans-serif", "fontWeight": "600" }
                 }
               }'>
        </redoc>

        <!-- usa CDN (mais leve e atualizada) -->
        <script src="/static/redoc.standalone.js"></script>
      </body>
    </html>
    """
    return HTMLResponse(content=html_content)
